#!/bin/bash

installPath=$1
srcPath=$2

if [ ! -d "$installPath" ]; then
        echo "No install path supplied.  It should be a directory that can be written to and whose current content is of no value (will be overwritten) "
        echo "$0 <install path> <src tree trunk directory>"
        exit 1
fi

if [ ! -d "$srcPath" ]; then
        echo "No src path supplied.  It should be the trunk directory containing the jars, files, what not that need to be supplied."
        echo "$0 <install path> <src tree trunk directory>"
        exit 1
fi


export ONLEPLIBPATH=$installPath

# *******************************
# Clean out prior installation
# *******************************
rm -Rf $ONLEPLIBPATH

# *******************************
# Make the directories as needed
# *******************************
mkdir -p $ONLEPLIBPATH/msgdata
mkdir -p $ONLEPLIBPATH/kvstores
mkdir -p $ONLEPLIBPATH/logs

# *******************************
# Build fat-jars
# *******************************

echo "clean, package and assemble $srcPath ..."

cd $srcPath
sbt clean 
sbt package 
sbt OnLEPManager/assembly 
sbt MetadataAPI/assembly 
sbt AlchemyKVInit/assembly 

# recreate eclipse projects
echo "refresh the eclipse projects ..."
cd $srcPath
sbt eclipse

# Move them into place
echo "copy the fat jars to $ONLEPLIBPATH ..."

cd $srcPath
cp SampleApplication/Bank/AlchemyKVInit/target/scala-2.10/AlchemyKVInit* $ONLEPLIBPATH
cp MetadataAPI/target/scala-2.10/MetadataAPI* $ONLEPLIBPATH
cp OnLEPManager/target/scala-2.10/OnLEPManager* $ONLEPLIBPATH

# *******************************
# Copy jars required (more than required if the fat jars are used)
# *******************************

# Base Types and Functions, InputOutput adapters, and original versions of things
echo "copy Base Types and Functions, InputOutput adapters..."
cp $srcPath/BaseFunctions/target/scala-2.10/basefunctions_2.10-0.1.0.jar $ONLEPLIBPATH
cp $srcPath/BaseTypes/target/scala-2.10/basetypes_2.10-0.1.0.jar $ONLEPLIBPATH
cp $srcPath/InputOutputAdapters/FileSimpleInputOutputAdapters/target/scala-2.10/filesimpleinputoutputadapters_2.10-1.0.jar $ONLEPLIBPATH
cp $srcPath/InputOutputAdapters/KafkaSimpleInputOutputAdapters/target/scala-2.10/kafkasimpleinputoutputadapters_2.10-1.0.jar $ONLEPLIBPATH
cp $srcPath/EnvContexts/SimpleEnvContextImpl/target/scala-2.10/simpleenvcontextimpl_2.10-1.0.jar $ONLEPLIBPATH
cp $srcPath/MetadataBootstrap/Bootstrap/target/scala-2.10/bootstrap_2.10-1.0.jar $ONLEPLIBPATH

# Storage jars
echo "copy Storage jars..."
cp $srcPath/Storage/target/scala-2.10/storage_2.10-0.0.0.2.jar $ONLEPLIBPATH

# Metadata jars
echo "copy Metadata jars..."
cp $srcPath/Metadata/target/scala-2.10/metadata_2.10-1.0.jar $ONLEPLIBPATH
cp $srcPath/MessageDef/target/scala-2.10/messagedef_2.10-1.0.jar $ONLEPLIBPATH
cp $srcPath/MetadataAPI/target/scala-2.10/metadataapi_2.10-1.0.jar $ONLEPLIBPATH
cp $srcPath/MetadataAPIService/target/scala-2.10/metadataapiservice_2.10-0.1.jar $ONLEPLIBPATH
cp $srcPath/MetadataAPIServiceClient/target/scala-2.10/metadataapiserviceclient_2.10-0.1.jar $ONLEPLIBPATH
cp $srcPath/Pmml/MethodExtractor/target/scala-2.10/methodextractor_2.10-1.0.jar $ONLEPLIBPATH

# OnLEP jars
echo "copy OnLEP jars..."
cp $srcPath/OnLEPBase/target/scala-2.10/onlepbase_2.10-1.0.jar $ONLEPLIBPATH
cp $srcPath/OnLEPManager/target/scala-2.10/onlepmanager_2.10-1.0.jar $ONLEPLIBPATH

# Pmml compile and runtime jars
echo "copy Pmml compile and runtime jars..."
cp $srcPath/Pmml/PmmlRuntime/target/scala-2.10/pmmlruntime_2.10-1.0.jar $ONLEPLIBPATH
cp $srcPath/Pmml/PmmlUdfs/target/scala-2.10/pmmludfs_2.10-1.0.jar $ONLEPLIBPATH
cp $srcPath/Pmml/PmmlCompiler/target/scala-2.10/pmmlcompiler_2.10-1.0.jar $ONLEPLIBPATH

# Bank Application jars
echo "copy Bank Application jars..."
cp $srcPath/SampleApplication/Bank/BankMsgsAndContainers/target/scala-2.10/bankmsgsandcontainers_2.10-1.0.jar $ONLEPLIBPATH
cp $srcPath/SampleApplication/Bank/BankBootstrap/target/scala-2.10/bankbootstrap_2.10-1.0.jar $ONLEPLIBPATH
cp $srcPath/SampleApplication/Bank/BankEnvContext/target/scala-2.10/bankenvcontext_2.10-1.0.jar $ONLEPLIBPATH
cp $srcPath/SampleApplication/Bank/AlchemyKVInit/target/scala-2.10/alchemykvinit_2.10-1.0.jar $ONLEPLIBPATH

# Med Application jars
echo "copy Med Application jars..."
cp $srcPath/SampleApplication/Medical/MedicalBootstrap/target/scala-2.10/medicalbootstrap_2.10-1.0.jar $ONLEPLIBPATH

# model debug jars (if any)
echo "copy model debug jars (if any)..."
cp $srcPath/modeldbg/Alchemy_000100/target/scala-2.10/alchemy_000100_2.10-1.0.jar $ONLEPLIBPATH

# sample configs
echo "copy sample configs..."
cp $srcPath/SampleApplication/Bank/AlchemyKVInit/src/main/resources/*cfg $ONLEPLIBPATH
cp $srcPath/OnLEPManager/src/main/resources/*cfg $ONLEPLIBPATH

# other jars 
echo "copy other jars..."
cp $srcPath/../externals/log4j/log4j-1.2.17.jar $ONLEPLIBPATH

# *******************************
# BankPoc data prep
# *******************************

# Prepare test messages and copy them into place

echo "Prepare test messages and copy them into place..."
cd $srcPath/SampleApplication/Bank/AlchemyKVInit/src/main/resources
gzip -c OneCustomerTransactionsAlerts.csv > OneCustomerTransactionsAlerts.gz
gzip -c OneCustomerTransactionsNoAlerts.csv > OneCustomerTransactionsNoAlerts.gz
gzip -c transactionsNoAlerts.csv > transactionsNoAlerts.gz
gzip -c transactionsAlerts.csv > transactionsAlerts.gz
gzip -c OneCustomerTransactionsAlerts.csv > OneCustomerTransactionsAlerts.gz
gzip -c OneCustomerTransactionsNoAlerts.csv > OneCustomerTransactionsNoAlerts.gz
gzip -c alltransactionsDateTimeOrder.csv > alltransactionsDateTimeOrder.gz

cp *gz $ONLEPLIBPATH/msgdata/

# Prepare the test kvstore - CustomerPreferences map 
echo "Prepare the test kvstore - CustomerPreferences map..."

java -jar $ONLEPLIBPATH/AlchemyKVInit-1.0 --kvname CustomerPreferences_100 --kvpath $ONLEPLIBPATH/kvstores/ --csvpath $srcPath/SampleApplication/Bank/AlchemyKVInit/src/main/resources/EnvContextContainerData/CustomerPreferences.csv --keyfieldname ENT_ACC_NUM

# Prepare the test kvstore - AlertHistory map 
echo "Prepare the test kvstore - AlertHistory map..."
java -jar $ONLEPLIBPATH/AlchemyKVInit-1.0 --kvname AlertHistory_100 --kvpath $ONLEPLIBPATH/kvstores/ --csvpath $srcPath/SampleApplication/Bank/AlchemyKVInit/src/main/resources/EnvContextContainerData/AlertHistory.csv --keyfieldname ENT_ACC_NUM

# Prepare the test kvstore - AlertParameters map 
echo "Prepare the test kvstore - AlertParameters map..."
java -jar $ONLEPLIBPATH/AlchemyKVInit-1.0 --kvname AlertParameters_100 --kvpath $ONLEPLIBPATH/kvstores/ --csvpath $srcPath/SampleApplication/Bank/AlchemyKVInit/src/main/resources/EnvContextContainerData/AlertParameters.csv --keyfieldname ALERT

# Prepare the test kvstore - TukTier map 
echo "Prepare the test kvstore - TukTier map..."
java -jar $ONLEPLIBPATH/AlchemyKVInit-1.0 --kvname TukTier_100 --kvpath $ONLEPLIBPATH/kvstores/ --csvpath $srcPath/SampleApplication/Bank/AlchemyKVInit/src/main/resources/EnvContextContainerData/TukTier.csv --keyfieldname TIERSET_ID


# *******************************
# All that is left is to run the OnLEPManager
# *******************************

# no debug
# echo java -jar $srcPath/OnLEPManager/target/scala-2.10/OnLEPManager-1.0 --config $ONLEPLIBPATH/simp_samp_node1_config.cfg
# java -jar /home/rich/ligadata/barc/svn/ligadata/trunk/OnLEPManager/target/scala-2.10/OnLEPManager-1.0 --config /tmp/OnLEPInstall/BankPoc.cfg

# debug version intended for eclipse attached debugging
# echo java -Xdebug -Xrunjdwp:transport=dt_socket,address=8998,server=y -jar $srcPath/OnLEPManager/target/scala-2.10/OnLEPManager-1.0 --config $ONLEPLIBPATH/BankPoc.cfg
# java -Xdebug -Xrunjdwp:transport=dt_socket,address=8998,server=y -jar /home/rich/ligadata/barc/svn/ligadata/trunk/OnLEPManager/target/scala-2.10/OnLEPManager-1.0 --config /tmp/OnLEPInstall/BankPoc.cfg


echo "installOnLEP complete..."
