These steps are tested only on a Linux(centos 6.5) VM only
The following steps could be used if you have access complete GITHUB distribution of RTD.

** Install scala 2.10.4
** Install java SDK ( 1.7.1 or greater)
** Install joda time libraries 
   joda-convert-1.6.jar,joda-time-2.4.jar into a local directory(I place them under $HOME/libs)
   These jars file are needed in the classpath for successful compilation of
   scala code generated by model compiler
** In the trunk, (github/RTD/trunk) run the following command
cd $HOME/github/RTD/trunk
sbt package
sbt
> project MetadataAPI
> assembly
> exit
** copy the following blibraries from your environment to $ONLEPLIBPATH(same variable used
   by the engine, I am using $HOME/OnLEP for ONLEPLIBPATH) using the following commands
   These jars file are needed in the classpath for successful compilation of
   scala code generated by model compiler and message compiler. 

cp $HOME/github/RTD/trunk/BaseFunctions/target/scala-2.10/basefunctions_2.10-0.1.0.jar $HOME/OnLEP
cp $HOME/github/RTD/trunk/BaseTypes/target/scala-2.10/basetypes_2.10-0.1.0.jar $HOME/OnLEP
cp $HOME/github/RTD/trunk/MessageDef/target/scala-2.10/messagedef_2.10-1.0.jar $HOME/OnLEP
cp $HOME/github/RTD/trunk/Metadata/target/scala-2.10/metadata_2.10-1.0.jar $HOME/OnLEP
cp $HOME/github/RTD/trunk/OnLEPBase/target/scala-2.10/onlepbase_2.10-1.0.jar $HOME/OnLEP
cp $HOME/github/RTD/trunk/SampleApplication/Medical/MedicalBootstrap/target/scala-2.10/medicalbootstrap_2.10-1.0.jar $HOME/OnLEP
cp $HOME/github/RTD/trunk/SampleApplication/Medical/MedicalBootstrap/target/scala-2.10/medicalbootstrap_2.10-1.0.jar $HOME/OnLEP
cp $HOME/github/RTD/trunk/Pmml/PmmlCompiler/target/scala-2.10/pmmlcompiler_2.10-1.0.jar $HOME/OnLEP
cp $HOME/github/RTD/trunk/Pmml/PmmlRuntime/target/scala-2.10/pmmlruntime_2.10-1.0.jar $HOME/OnLEP
cp $HOME/github/RTD/trunk/Pmml/PmmlUdfs/target/scala-2.10/pmmludfs_2.10-1.0.jar $HOME/OnLEP
cp $HOME/github/RTD/trunk/Pmml/MethodExtractor/target/scala-2.10/methodextractor_2.10-1.0.jar $HOME/OnLEP
cp $HOME/github/RTD/externals/log4j/log4j-1.2.17.jar $HOME/OnLEP

** Also copy json -jackson libraries, If you use sbt for compilation of MetadataAPI, these libraries will be available in $HOME/.ivy2
cp $HOME/.ivy2/cache/com.fasterxml.jackson.core/jackson-core/bundles/jackson-core-2.3.1.jar $HOME/OnLEP
cp $HOME/.ivy2/cache/com.fasterxml.jackson.core/jackson-annotations/bundles/jackson-annotations-2.3.0.jar $HOME/OnLEP
cp $HOME/.ivy2/cache/com.fasterxml.jackson.core/jackson-databind/bundles/jackson-databind-2.3.1.jar $HOME/OnLEP
cp $HOME/.ivy2/cache/org.json4s/json4s-core_2.10/jars/json4s-core_2.10-3.2.9.jar $HOME/OnLEP/
cp $HOME/.ivy2/cache/org.json4s/json4s-jackson_2.10/jars/json4s-jackson_2.10-3.2.9.jar $HOME/OnLEP/
cp $HOME/.ivy2/cache/org.json4s/json4s-ast_2.10/jars/json4s-ast_2.10-3.2.9.jar $HOME/OnLEP/
cp $HOME/.ivy2/cache/org.json4s/json4s-native_2.10/jars/json4s-native_2.10-3.2.9.jar $HOME/OnLEP/
cp $HOME/github/RTD/trunk/SampleApplication/Medical/MedEnvContext/target/scala-2.10/medenvcontext_2.10-1.0.jar $HOME/OnLEP

** Update the config file "RTD/trunk/MetadataAPI/src/main/resources/MetadataAPI.properties"
   to suit your environment.

** Contents of MetadataAPI.properties

ROOT_DIR=/home/vmandava
DATABASE=treemap
DATABASE_HOST=localhost
GIT_ROOT=$ROOT_DIR/github
JAR_TARGET_DIR=$ROOT_DIR/OnLEP
SCALA_HOME=$ROOT_DIR/scala-2.10.4
JAVA_HOME=$ROOT_DIR/jdk1.8.0_05
MANIFEST_PATH=$GIT_ROOT/RTD/trunk/MetadataAPI/src/test/SampleTestFiles/Models/manifest.mf
CLASSPATH=.:$ROOT_DIR/OnLEP/metadata_2.10-1.0.jar:$ROOT_DIR/OnLEP/basefunctions_2.10-0.1.0.jar:$ROOT_DIR/OnLEP/messagedef_2.10-1.0.jar:$ROOT_DIR/OnLEP/methodextractor_2.10-1.0.jar:$ROOT_DIR/OnLEP/pmmlcompiler_2.10-1.0.jar:$ROOT_DIR/OnLEP/bankenvcontext_2.10-1.0.jar:$ROOT_DIR/OnLEP/onlepbase_2.10-1.0.jar:$ROOT_DIR/OnLEP/bankbootstrap_2.10-1.0.jar:$ROOT_DIR/OnLEP/bankmsgsandcontainers_2.10-1.0.jar:$ROOT_DIR/OnLEP/medicalbootstrap_2.10-1.0.jar:$ROOT_DIR/OnLEP/medenvcontext_2.10-1.0.jar:$ROOT_DIR/OnLEP/joda-time-2.4.jar:$ROOT_DIR/OnLEP/joda-convert-1.6.jar:$ROOT_DIR/OnLEP/basetypes_2.10-0.1.0.jar:$ROOT_DIR/OnLEP/pmmludfs_2.10-1.0.jar:$ROOT_DIR/OnLEP/pmmlruntime_2.10-1.0.jar:$ROOT_DIR/OnLEP/json4s-native_2.10-3.2.9.jar:$ROOT_DIR/OnLEP/json4s-core_2.10-3.2.9.jar:$ROOT_DIR/OnLEP/json4s-ast_2.10-3.2.9.jar:$ROOT_DIR/OnLEP/jackson-databind-2.3.1.jar:$ROOT_DIR/OnLEP/jackson-annotations-2.3.0.jar:$ROOT_DIR/OnLEP/json4s-jackson_2.10-3.2.9.jar:$ROOT_DIR/OnLEP/jackson-core-2.3.1.jar:$ROOT_DIR/OnLEP/log4j-1.2.17.jar
NOTIFY_ENGINE=NO
ZNODE_PATH=/ligadata/metadata
ZOOKEEPER_CONN_STRING=localhost:2181


** Make sure the directory specified by the property "JAR_TARGET_DIR" exists
   (this directory is staging directory to compile scala code generated by model compiler)
** Note that classpath may contain lot of unnecessary jar files, but some of them
   are required to compile scala code generated by model compiler.
** Alerting Engine(optional) when MetadataAPI objects are added/removed/updated
   Make sure ZooKeeper is installed and running on the host as defined by ZOOKEEPER_CONN_STRING
   Set the parameter NOTIFY_ENGINE to YES( by default it is set to NO)

** Start MetadataAPI test harness using fat-jar
java -jar RTD/trunk/MetadataAPI/target/scala-2.10/MetadataAPI-1.0


