These steps are tested only on a Linux(centos 6.5) VM only
The following steps could be used if you have access complete GITHUB distribution of RTD.

** Install scala 2.10.4
** Install java SDK ( 1.7.1 or greater)
** Install joda time libraries 
   joda-convert-1.6.jar,joda-time-2.4.jar into a local directory(I place them under $HOME/libs)
   These jars file are needed in the classpath for successful compilation of
   scala code generated by model compiler
** In the trunk, (github/RTD/trunk) run the following command
cd $HOME/github/RTD/trunk
sbt package
sbt
> project MetadataAPI
> assembly
> exit
** copy the following blibraries from your environment to $HOME/libs using the following commands
   These jars file are needed in the classpath for successful compilation of
   scala code generated by model compiler and message compiler

cp $HOME/github/RTD/trunk/BaseFunctions/target/scala-2.10/basefunctions_2.10-0.1.0.jar $HOME/libs
cp $HOME/github/RTD/trunk/BaseTypes/target/scala-2.10/basetypes_2.10-0.1.0.jar $HOME/libs
cp $HOME/github/RTD/trunk/MessageDef/target/scala-2.10/messagedef_2.10-1.0.jar $HOME/libs
cp $HOME/github/RTD/trunk/Metadata/target/scala-2.10/metadata_2.10-1.0.jar $HOME/libs
cp $HOME/github/RTD/trunk/OnLEPBase/target/scala-2.10/onlepbase_2.10-1.0.jar $HOME/libs
cp $HOME/github/RTD/trunk/SampleApplication/Medical/MedicalBootstrap/target/scala-2.10/medicalbootstrap_2.10-1.0.jar $HOME/libs
cp $HOME/github/RTD/trunk/SampleApplication/Medical/MedicalBootstrap/target/scala-2.10/medicalbootstrap_2.10-1.0.jar $HOME/libs
cp $HOME/github/RTD/trunk/Pmml/PmmlCompiler/target/scala-2.10/pmmlcompiler_2.10-1.0.jar $HOME/libs
cp $HOME/github/RTD/trunk/Pmml/PmmlRuntime/target/scala-2.10/pmmlruntime_2.10-1.0.jar $HOME/libs
cp $HOME/github/RTD/trunk/Pmml/PmmlUdfs/target/scala-2.10/pmmludfs_2.10-1.0.jar $HOME/libs
cp $HOME/github/RTD/trunk/Pmml/MethodExtractor/target/scala-2.10/methodextractor_2.10-1.0.jar $HOME/libs

** Update the config file "RTD/trunk/MetadataAPI/src/main/resources/MetadataAPI.properties"
   to suit your environment.

** Contents of MetadataAPI.properties

ROOT_DIR=/home/vmandava
DATABASE=treemap
DATABASE_HOST=localhost
GIT_ROOT=$ROOT_DIR/github
JAR_TARGET_DIR=$ROOT_DIR/libs
SCALA_HOME=$ROOT_DIR/scala-2.10.4
JAVA_HOME=$ROOT_DIR/jdk1.8.0_05
MANIFEST_PATH=$GIT_ROOT/RTD/trunk/MetadataAPI/src/test/SampleTestFiles/Models/manifest.mf
CLASSPATH=.:$ROOT_DIR/libs/metadata_2.10-1.0.jar:$ROOT_DIR/libs/basefunctions_2.10-0.1.0.jar:$ROOT_DIR/libs/messagedef_2.10-1.0.jar:$ROOT_DIR/libs/methodextractor_2.10-1.0.jar:$ROOT_DIR/libs/pmmlcompiler_2.10-1.0.jar:$ROOT_DIR/libs/bankenvcontext_2.10-1.0.jar:$ROOT_DIR/libs/onlepbase_2.10-1.0.jar:$ROOT_DIR/libs/bankbootstrap_2.10-1.0.jar:$ROOT_DIR/libs/bankmsgsandcontainers_2.10-1.0.jar:$ROOT_DIR/libs/medicalbootstrap_2.10-1.0.jar:$ROOT_DIR/libs/joda-time-2.4.jar:$ROOT_DIR/libs/joda-convert-1.6.jar:$ROOT_DIR/libs/basetypes_2.10-0.1.0.jar:$ROOT_DIR/libs/pmmludfs_2.10-1.0.jar:$ROOT_DIR/libs/pmmlruntime_2.10-1.0.jar


** Make sure the directory specified by the property "JAR_TARGET_DIR" exists
   (this directory is staging directory to compile scala code generated by model compiler)
** Note that classpath may contain lot of unnecessary jar files, but some of them
   are required to compile scala code generated by model compiler.

** Start MetadataAPI test harness using fat-jar
java -jar RTD/trunk/MetadataAPI/target/scala-2.10/MetadataAPI-1.0


